[
    {
        "id": 1,
        "titulo": "Python: Origem do nome",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/python-origem-do-nome> \n\n Por que uma das linguagens de programação mais amada no mundo tem esse nome e qual a origem dele? Tem relação com algum tipo de cobra? Descubra isso e muito mais neste artigo! \n\n ### Um pouco de história \n\n [Guido Van Rossum](https://pt.wikipedia.org/wiki/Guido_van_Rossum) criou o [Python](https://www.alura.com.br/cursos-online-programacao/python) em 1989. Ele trabalhava no [Centrum Voor Wiskunde en Informatica](https://www.cwi.nl/) no início dos anos 1980, e seu trabalho era implementar a linguagem de programação conhecida como [ABC](https://pt.wikipedia.org/wiki/ABC_(linguagem_de_programa%C3%A7%C3%A3o)).  \n\n Durante o final dos anos 1980, enquanto ainda estava no CWI, ele começou a procurar por uma linguagem de script que tivesse sintaxe semelhante ao ABC, mas que tivesse acesso às chamadas de sistema do [Amoeba](https://pt.wikipedia.org/wiki/Amoeba_sistema_operacional). Após procurar e não encontrar nenhuma linguagem que atendesse às suas necessidades, Rossum decidiu projetar uma linguagem de script simples que pudesse superar as inadequações do ABC.  \n\n No final da década de 1980, Rossum começou a desenvolver o novo script, e em 1991, lançou a versão de abertura da linguagem de programação. Esta primeira versão tinha um sistema de módulo [Modula-3](https://pt.wikipedia.org/wiki/Modula-3), linguagem que foi posteriormente denominada “Python”. \n\n ### Certo, mas de onde vem esse nome? \n\n Muitas pessoas costumam pensar que o nome Python tem origem em um tipo de cobra, já que o logotipo do Python mostra a imagem de uma cobra azul e amarela. \n\n ![gif do logo da linguagem de programação python](/assets/posts/1/gif-1.gif)  \n\n No entanto, a verdadeira história por trás da nomenclatura é um pouco diferente.  \n\n Na década de 1970, a BBC tinha um programa de TV popular do qual van Rossum era um grande fã chamado [Fly Circus de Monty Python](https://pt.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus), ou apenas Monty Python para os íntimos.  \n\n Assim, quando desenvolveu a linguagem, ele pensou que precisava de um nome que fosse curto, único e um pouco misterioso, e por algum motivo que só ele conhecia, decidiu chamar o projeto de ‘Python’. \n\n ![homem saindo de uma loja](/assets/posts/1/gif-2.gif) \n\n E se você fosse criar sua própria linguagem de programação, qual nome daria? Faria uma homenagem a sua série, jogo ou filme favorito? \n\n No nosso [curso de python](https://www.alura.com.br/cursos-online-programacao/python), que é uma formação completa, entramos também em outras curiosidades da linguagem e sua história, pois a comunidade é muito forte e toma decisões importantes. \n\n ### Conclusão \n\n Atualmente, [o Python é uma tendência mundial no mundo das pessoas que desenvolvem](https://blog.revelo.com.br/desenvolvedores-python-estao-em-alta-no-mercado/), já que pode ser aplicado em diferentes cenários, como: Data Science, aplicações web, desenvolvimento Back-End, criação de jogos e scripts. \n\n Quer aprender mais sobre Python? Veja: \n\n - [Python do zero - Formação na linguagem mais querida do momento](https://www.alura.com.br/formacao-Python-linguagem) \n\n - [Python para Web - Formação Django](https://www.alura.com.br/formacao-django) \n\n - [API com Python - Curso Django Rest Framework](https://www.alura.com.br/curso-online-api-django-3-rest-framework) \n\n - [TDD com Python - Desenvolvimento guiado por testes](https://cursos.alura.com.br/course/tdd-django-3-testes) \n\n - [Pacman com Python - Criando um jogo com Pygame](https://www.alura.com.br/curso-online-python-pygame-pacman-colisao-pontuacao) \n\n "
    },
    {
        "id": 2,
        "titulo": "O que é Node?",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/node-js-definicao-caracteristicas-vantagens-usos> \n\n  ### Introdução \n\n Node.JS é uma ferramenta amplamente utilizada no universo de desenvolvimento e todos que atuam na área de tecnologia já ouviram falar, nem que seja nos milhares de anúncios de cursos ou mesmo de vagas. Mas você se pergunta: afinal, o que é Node.js? Para que serve? Como ele atua \n\n \n\n Calma que, antes de olhar para o ambiente Node.JS, precisamos entender um pouco sobre o que é o JavaScript e como ele funciona. Vamos lá! \n\n \n\n ### Node.JS e JavaScript \n\n \n\n JavaScript é uma linguagem de programação que originalmente foi desenvolvida para trazer maior interatividade aos **websites** através da manipulação do *DOM* (Document Object Model). Vamos conferir a definição do livro que é uma referência na temática, o **Eloquent JavaScript** \n\n \n\n > O JavaScript foi introduzido em 1995 como uma forma de adicionar dinamicidade à páginas da web no navegador Netscape Navigator. Desde então, a linguagem foi adotada por todos os outros principais navegadores gráficos da web. Ela tornou possíveis o desenvolvimento das aplicações modernas  da web - aplicações com os quais você pode interagir diretamente sem recarregar a página a cada ação. JavaScript também é usado em sites mais tradicionais para fornecer várias formas de interatividade de forma mais inteligente \n\n  \n\n >Fonte: [Tradução livre do livro Eloquent JavaScript](https://eloquentjavascript.net/00_intro.html) \n\n \n\n Portanto, de forma resumida, podemos entender que o **JavaScript** foi pensado para ser rápido, dinâmico e acessível. A *linguagem interpretada* possibilita subir ou trabalhar em suas aplicações sem precisar  configurar todo um ambiente complexo. \n\n \n\n Essas características motivaram o engenheiro de software Ryan Dahl a desenvolver um ambiente, como um programa que você instala no seu computador, que trabalha com a linguagem JavaScript fora do navegador e pelo lado do servidor, via terminal, de uma maneira menos restritiva \n\n \n\n ### Tudo bem, mas e o Node.JS? \n\n  \n\n O JavaScript nasceu para atender demandas voltadas ao Front e como as necessidades aumentam de acordo com o crescimento tecnológico, surgiu a ideia de utilizar uma mesma linguagem no lado do cliente e do servidor para otimizar processos e serviços. Dessa forma, o Node.JS  aparece como uma alternativa viável para programação Back-End por se tratar de um ambiente para desenvolvimento utilizando a linguagem JavaScript \n\n \n\n De acordo com sua definição oficial, o Node é um **runtime**, que nada mais é do que um conjunto de códigos, API’s, ou seja, são bibliotecas responsáveis pelo tempo de execução (é o que faz o seu programa rodar) que funciona como um interpretador de JavaScript fora do ambiente do **navegador web**. \n\n \n\n É importante frisar que o Node.JS é um ambiente de execução assíncrono, isto é, ele trabalha de modo a não bloquear no momento da execução da aplicação, delegando os processos demorados a um segundo plano. \n\n \n\n Ele dá muito certo  com os servidores de arquitetura **“single threaded”**, isto significa que todos os pedidos para o servidor são executados no mesmo tópico - em vez de serem gerados em processos separados. Um dos grandes diferenciais da parceria Node.JS e Javascript é o bom desempenho no uso de APIs, já que o Javascript faz bastante uso de APIs assíncronas \n\n \n\n Você deve estar se perguntando: “Beleza, já entendi o que é o Node.JS e seu diferencial quando o assunto é o seu uso com o Javascript, mas o que isso significa?” Vamos entender um pouco mais... vem comigo, que te explico.. \n\n \n\n #### Como o Node.JS funciona \n\n \n\n O **Node é capaz de interpretar um código JavaScript**, igual ao que o navegador faz. Sendo assim, quando o navegador recebe um comando em JavaScript, ele o interpreta e depois executa as instruções fornecidas. \n\n \n\n O Node é fantástico (totalmente “sem parcialidade”, aqui pessoal, juro!)  porque torna possível o envio de instruções (os nossos códigos) sem precisar de um navegador ativo, basta ter o Node.JS instalado e utilizar o terminal para executar um programa construído em JavaScript.  \n\n \n\n Além disso, você pode utilizar apenas uma linguagem de programação para tratar requisições entre cliente e servidor. Sensacional, não é? \n\n \n\n Para que todo esse processo seja possível de ocorrer fora do navegador, o Node utiliza uma outra ferramenta chamada de **Chrome's V8 JavaScript Engine.** É esse motor V8 do Chrome que compila e executa o código JavaScript no lugar de apenas interpretá-lo. \n\n \n\n *Ainda parece muito confuso? Vem comigo que te explico melhor… \n\n \n\n O motor V8 da Google é o centro, o coração que processa todo o código JavaScript do navegador para que sua máquina compreenda e disponibilize os recursos e interações. Só é possível visualizar páginas em JavaScript ou trabalhar com um código pelo Node.JS devido ao processamento do motor V8 do Chrome. \n\n \n\n Graças ao núcleo baseado em JavaScript e no motor V8 da Google, o Node.JS possui algumas características que, dependendo do cenário, podem ser consideradas como *benefícios* da plataforma, vamos conferir algumas \n\n \n\n ### Características do Node.Js \n\n \n\n Node.JS pode ser utilizado nas famosas APIS Rest, web scrapping, chatbots, IoT, web servers, aplicações Desktop, tudo devido a sua característica altamente versátil. Dentre as principais, podemos citar \n\n \n\n - **Multiplataforma:** permite criar desde aplicativos desktop, aplicativos móveis e até sites SaaS \n\n - **Multi-paradigma:** é possível programar em diferentes paradigmas, como: Orientado a Objetos, funcional, imperativo e dirigido à eventos \n\n - **Open Source:** é uma plataforma de código aberto, isso significa que você pode ter acesso ao código fonte do Node.JS e realizar suas próprias customizações ou mesmo contribuir para a comunidade de forma direta \n\n - **Escalável:** Node.JS  foi criado para construir aplicações web escaláveis, como podemos ver na sua [documentação oficial]( https://nodejs.org/en/about/) \n\n \n\n O Node.JS ainda apresenta uma curva de aprendizado relativamente menor comparado à outras linguagens voltadas ao Back-End e possui uma comunidade gigante disposta a ajudar. E sem dúvida a união dessas forças é o **super poder do Node.JS** \n\n \n\n ### Empresas que usam Node.Js \n\n \n\n Tudo bem, falamos das inúmeras qualidades do Node.JS mas, na prática… onde eu posso trabalhar com a ferramenta \n\n \n\n Por conta dos *super-poderes* do Node.JS, uma gama de gigantes no mercado atua diretamente com a plataforma em suas regras de negócio, confere só a listinha de algumas \n\n \n\n - **NetFlix:** substituiu o renderizador baseado em Java pelo de JavaScript com Node.JS para diminuir o tempo de espera nas requisições dos usuários e conseguiu uma redução de cerca de 1 minuto \n\n - **IBM:** criou o The Canary in the Gold Mine (CITGM), um utilitário de testes amplamente utilizado pela companhia \n\n - **LinkedIn:** o aplicativo **mobile** da maior rede profissional é construído em Node e HTML5, você pode conferir a matéria na íntegra [aqui](https://venturebeat.com/2011/08/16/linkedin-node/) \n\n - **Uber:** sistema de relacionamento entre usuários e condutores foi construído em Node.JS por conta de sua rápida resposta \n\n \n\n E... pasmem! Node.js foi inclusive utilizado pela **NASA** para criar uma API que integra três bases de dados em um só, justamente para otimizar o acesso aos dados. [Node.JS ajuda NASA a manter Astronautas seguros e arquivos acessíveis - **em inglês**](https://openjsf.org/wp-content/uploads/sites/84/2020/02/Case_Study-Node.js-NASA.pdf) \n\n \n\n Node.JS está mesmo voando!! \n\n \n\n ### Meu primeiro código em Node.Js \n\n \n\n Para rodar a plataforma na sua máquina é necessário instalar o Node.JS. Caso você ainda não tenha, siga o tutorial [**Instalando o Node.JS no Windows e linux**](https://www.alura.com.br/artigos/instalando-nodejs-no-windows-e-linux#:~:text=Ap%C3%B3s%20baixar%20o%20instalador%2C%20basta,gostaria%20de%20instalar%20outras%20ferramentas.) \n\n \n\n E depois colocar a mão no código \n\n \n\n Aquele “Hello World!” para dar sorte:\n\n \n\n ```\n\n console.log(‘Hello, World!’)\n\n ```\n\n \n\n E agora você pode subir seu primeiro servidor:\n\n \n\n ```\n\n const http = require('http');\n\n const server = http.createServer(function (req, res) {\n\n res.writeHead(200, {'Content-type': 'text/html'});\n\n res.end('Hello Node!');\n\n });\n\n server.listen(3000);\n\n console.log('Servidor funcionando. Acesse: localhost:3000');\n\n ```\n\n \n\n Ah, é importante lembrar que aqui o código está de acordo com a última versão estável, a versão LTS (Long-term support ou suporte de longo prazo, em português). Mas o Node trouxe uma novidade muito bacana em sua nova versão, olha só no artigo [**Revolução no Node.js: adeus ao Axios e Node-fetch na versão 17.5.0**](https://www.alura.com.br/artigos/revolucao-node-js-adeus-axios-fetch-api-versao-17-5-0).\n\n \n\n Agora é só comemorar e aprofundar seus estudos em Node.JS!"
    },
    {
        "id": 3,
        "titulo": "O que é JWT?",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/o-que-e-json-web-tokens> \n\n  Você já foi em algum evento que precisou apresentar um **documento de identificação** para comprovar que você era realmente a pessoa que comprou o ingresso? O ato de solicitar o documento de identificação é uma forma de **autenticação** para que você receba a **autorização** para entrar. Na web, esse processo funciona de forma parecida. Para fazer requisições de alguns serviços ou acessar páginas específicas, você precisa se identificar de alguma forma, e essa identificação precisa ser segura e única.  \n\n Neste artigo você vai compreender o que é o padrão JWT (sigla para “JSON Web Tokens”) para autenticação, muito usado na web. Também veremos: \n\n  \n\n - O que é um token; \n\n - Para que serve e quando usar um JWT; \n\n - Como criar e verificar seu JWT token. \n\n  \n\n ### O que é um token? \n\n  \n\n Atualmente, ouvimos muito a palavra token relacionada a NFTs (sigla para “Tokens não fundíveis” em português), metaverso, criptomoedas, etc. Porém, fora desse meio, um token é uma **assinatura digital**, **uma chave**.  \n\n  \n\n Quando você abre uma conta em um banco, você precisa definir uma senha e seus dados pessoais. Esses dados são convertidos em uma assinatura digital que vai identificar você de **forma única** para aquele banco e, toda vez que você acessar seu banco e entrar com sua senha e um dado pessoal, o banco entenderá e **confirmará** que você é aquele usuário logado, semelhante a entrarmos no evento quando apresentamos nosso documento de identidade. \n\n  \n\n Existem vários algoritmos e padrões que transformam suas informações em um token, isto é, uma chave de autenticação única, que faz sentido para o serviço ou aplicação que esteja tentando acessar no momento. Um desses padrões é o JWT, que é seguro por permitir uma autenticação entre duas partes através de um **token assinado**. \n\n  \n\n ### O que é JWT? \n\n  \n\n Um JWT é um padrão para autenticação e troca de informações definido pela [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519). Nele é possível armazenar de forma segura e compacta [objetos JSON](https://www.alura.com.br/artigos/o-que-e-json). Este token é um código Base64 e pode ser assinado usando um segredo ou par de chaves privadas/públicas. \n\n  \n\n Tokens assinados podem verificar a integridade das informações contidas neles, diferente de tokens criptografados que ocultam essas informações. Se um JWT é assinado por um par de chaves pública/privada, a **assinatura** certifica que a parte que possui a chave privada é quem de fato assinou.  \n\n  \n\n #### Quando e onde eu posso usar um JWT? \n\n  \n\n Você pode usar, por exemplo, em um cenário de **autorização.** Depois que o usuário estiver conectado, é possível observar cada solicitação e verificar se esta inclui o JWT, permitindo que o usuário acesse rotas, serviços e outros recursos. \n\n  \n\n Outro cenário de utilização de JWTs são as **trocas de informações** pois, como eles são assinados, é possível ter certeza de que os remetentes são quem dizem ser quem são. Além disso, podemos identificar se o conteúdo da assinatura foi alterado ou não devido à composição de um JWT. \n\n  \n\n #### Como surgiu o JWT? \n\n  \n\n Ele faz parte de uma família de especificações: a família JOSE. \n\n  \n\n JOSE significa JSON *Object Signing and Encryption*, em português **Assinatura e criptografia de objetos JSON**. O JWT faz parte dessa família de especificações e representa o token. Abaixo, você confere outras especificações desta família: \n\n  \n\n - JWT (JSON Web Tokens): representa o token propriamente dito; \n\n - JWS (JSON Web Signature): representa a assinatura do token; \n\n - JWE (JSON Web Encryption): representa a assinatura para criptografia do token; \n\n - JWK (JSON Web Keys): representa as chaves para a assinatura; \n\n - JWA (JSON Web Algorithms): representa os algoritmos para assinatura do token. \n\n  \n\n Agora que você já sabe o que é, para que serve e quando usar um JWT, vamos entender mais a fundo como funciona e quais os componentes de um JWT. Vem comigo! \n\n  \n\n ### Componentes básicos de um JSON Web Token \n\n  \n\n Um JWT possui uma estrutura básica composta pelo _header_, _payload_ e a _signature_. Essas três partes são separadas por pontos ( `.` ). Dessa forma, seria algo do tipo: `header.payload.signature`. Vamos entender melhor cada uma dessas partes! \n\n  \n\n #### Header \n\n  \n\n Headers é o cabeçalho do token onde passamos basicamente duas informações: o `alg` que informa qual algoritmo é usado para criar a assinatura e o `typ` que indica qual o tipo de token. \n\n   \n\n  \n\n ```jsx \n\n { \n\n \"alg\": \"HS256\", \n\n \"typ\": \"JWT\" \n\n } \n\n ``` \n\n  \n\n #### Payload \n\n  \n\n O payload é o componente onde podemos encontrar os dados referentes à autenticação como senha e email, por exemplo. \n\n  \n\n ```jsx \n\n { \n\n \"email\": \"nome@alura.com.br\", \n\n \"password\": \"HuEKW489!j445*\" \n\n } \n\n ``` \n\n  \n\n #### Signature \n\n  \n\n A assinatura do token (_signature_) é composta pela codificação do header e do payload somada a uma chave secreta e é gerada pelo algoritmo especificado no cabeçalho. \n\n  \n\n ```jsx \n\n HS256SHA256( \n\n base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret_key) \n\n ``` \n\n  \n\n O resultado são três strings separadas por pontos que podem ser facilmente utilizadas em ambientes HTML e protocolos HTTP. \n\n  \n\n ```jsx \n\n eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. \n\n eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ. \n\n SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c \n\n ``` \n\n  \n\n Agora que entendemos como é “por dentro” um JWT vamos criar nosso próprio JSON Web Token! \n\n  \n\n ### Criando um jwt token \n\n  \n\n Para começar, vamos criar uma pasta chamada `jwt` no diretório que você desejar. Crie um arquivo javascript com o nome que escolher, eu estou utilizando `index.js`. Faça a instalação da `lib jwt` que escolher. Existem diversas libs que ajudam na geração de JWTs. Irei utilizar a [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) que é uma das mais populares, mas você pode ficar à vontade para explorar outras opções. \n\n  \n\n O primeiro passo é importar a lib no nosso arquivo: \n\n  \n\n ```jsx \n\n const jwt = require('jsonwebtoken'); \n\n ``` \n\n  \n\n  Agora criamos a nossa chave secreta. A ideia é que só você saiba a sua chave secreta e que ela seja difícil a fim de dificultar a ação de ataques maliciosos. A minha ficou desse jeito: \n\n  \n\n ```jsx \n\n const secretKey = 'skljaksdj9983498327453lsldkjf'; \n\n ``` \n\n  \n\n Feito isso, vamos criar nosso token utilizando o método `sign`. Este método aceita como parâmetros o payload, a chave secreta e o header, nesta ordem. \n\n  \n\n ```jsx \n\n const nossoToken = jwt.sign( \n\n   { \n\n email: 'nome@alura.com.br', \n\n password: 'HuEKW489!j445*', \n\n   }, \n\n   secretKey, \n\n   { \n\n expiresIn: '1y', \n\n subject: '1', \n\n   } \n\n ); \n\n ``` \n\n  \n\n Para este JWT, eu estou informando um email e senha no payload; minha chave secreta; e no header estou informando um **subject,** que na biblioteca deste exemplo funciona como um id. Além disso, estou dizendo que nosso token **expira** em 1 ano. Por padrão, o algoritmo de codificação é o HS256. \n\n  \n\n Para visualizar a saída em nosso terminal, utilizei a biblioteca **Nodemon** que você pode instalar e ver como funciona acessando [este link](https://www.npmjs.com/package/nodemon). O nodemon é uma ferramenta que ajuda a desenvolver aplicativos baseados em Node.js, reiniciando automaticamente o aplicativo quando são detectadas alterações de arquivo no diretório. \n\n  \n\n Podemos ver nosso token gerado passando a variável `nossoToken` em um `console.log`: \n\n  \n\n ```jsx \n\n console.log(nossoToken); \n\n ``` \n\n  \n\n A saída deve ser: \n\n  \n\n ```jsx \n\n eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A \n\n ``` \n\n  \n\n ### Verificando nosso JWT \n\n  \n\n Para verificar nosso token podemos utilizar um método da própria biblioteca [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) chamado `decode` passando o token gerado. \n\n  \n\n ```jsx \n\n const tokenGerado = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A'; \n\n  \n\n console.log(jwt.decode(tokenGerado)); \n\n ``` \n\n  \n\n A saída deste código é: \n\n  \n\n ```jsx \n\n { \n\n   email: 'nome@alura.com.br', \n\n   password: 'HuEKW489!j445*', \n\n   iat: 1651683517, \n\n   exp: 1683241117, \n\n   sub: '1' \n\n } \n\n ``` \n\n  \n\n Onde os parâmetros `iat`, `exp` e `sub` são respectivamente, as datas de criação e expiração, no formato UTC, em que o token foi criado e em que expirará, e o `subject` que passamos no nosso código com valor 1. Outra alternativa para verificar nosso token é acessando o link: [https://jwt.io/](https://jwt.io/). Neste caso, só precisamos passar o token gerado e iremos visualizar as informações decodificadas. \n\n  \n\n Agora, você deve estar se perguntando: “Agora que eu sei o que é e como funciona um JSON Web Token, como usá-lo em minhas aplicações front-end?” \n\n  \n\n Vamos descobrir! \n\n  \n\n ### Autenticação com tokens \n\n  \n\n Imagine que você é uma pessoa desenvolvedora e está criando o front-end de uma aplicação para um banco. Na página de login você pega os dados dos usuários e envia esses dados para uma API utilizando o fetch ou axios, por exemplo. \n\n  \n\n ``` \n\n fetch(`${baseUrl}/auth/login`, { \n\n method: ‘POST’ \n\n headers: { \n\n  ‘Content Type’: ‘Application/json’, \n\n }, \n\n body: usuário, \n\n }) \n\n .then((resposta) => { \n\n ...alguma coisa \n\n }) \n\n .catch((erro) => { \n\n ...alguma coisa \n\n }); \n\n  \n\n ``` \n\n  \n\n O servidor irá pegar esses dados e, por meio de uma lógica, irá retornar um token que vai identificar aquele usuário. Agora, toda vez que este usuário logar na plataforma, ele passará por uma **autenticação** e, se estiver tudo certo com os dados, será **autorizado** a acessar determinadas áreas da aplicação, como ver o saldo. Geralmente essa **codificação** e **geração** de tokens é realizada pelo back-end, mas você precisará garantir que este usuário logado possa continuar acessando outras áreas da aplicação. \n\n  \n\n Você também pode salvar o token na *session storage* ou *local storage* do seu navegador, para garantir que, enquanto o token não expirar, o usuário permaneça logado na aplicação. Além disso, é importante que, ao efetuar o login, o usuário seja redirecionado para uma página Home, onde ele poderá ver outras funcionalidades da aplicação.  \n\n  \n\n Quando este usuário tentar acessar a página que mostra o seu saldo, por exemplo, você pode fazer uma requisição, usando axios ou fetch passando no headers um campo “Authorization” com o token gerado. Isso irá fazer com que o servidor verifique se o usuário tem permissão ou não de acessar aquela página específica. \n\n  \n\n ``` \n\n fetch(`${baseUrl}/saldo`, { \n\n headers: { \n\n  ‘Authorization’: Token, \n\n }, \n\n }) \n\n .then((resposta) => { \n\n ...alguma coisa \n\n }) \n\n .catch((erro) => { \n\n ...alguma coisa \n\n }); \n\n ``` \n\n  \n\n Quando o usuário fizer *logout* na nossa aplicação, você pode redirecioná-lo para outra página, e quando o token expirar, você redireciona o usuário para a página de login novamente.  \n\n  \n\n ### Conclusão \n\n  \n\n Quanta coisa legal não é mesmo?  \n\n  \n\n Neste artigo, você entendeu o que são JSON Web Tokens, para que servem, quais seus componentes e como utilizá-los em suas aplicações. Você também viu como utilizar tokens em uma aplicação front-end para autenticação de usuários. \n\n  \n\n Na Alura, temos a [formação de Next.js](https://cursos.alura.com.br/formacao-next-js) que está espetacular! Você pode aplicar todo esse conhecimento de JWT em uma aplicação real no curso de **[Next.js: autenticação e gerenciamento de Tokens](https://cursos.alura.com.br/course/nextjs-autenticacao-gerenciamento-tokens)**.  \n\n "
    },
    {
        "id": 4,
        "titulo": "O que é um Sprite 2D?",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/sprite-como-funciona-em-jogos-2d> \n\n  ## O que é um sprite? \n\n É bem comum em jogos vermos vários personagens, movimento de objetos, mapas desenhados ao fundo e muita coisa acontecendo. Todos estes elementos também são conhecidos como **sprite**. Neste artigo, vamos focar nos sprites 2D e como são feitas as animações. \n\n Um sprite é uma imagem ou um objeto gráfico de duas dimensões em um jogo, que pode ser tanto personagem quanto objetos adicionados em um plano de fundo. Veja a abaixo a imagem de uma cena com uma sprite de um dos maiores jogos 2D de todos os tempos: \n\n Para os personagens, imagine que você queira criar os movimentos deles em seu jogo, como subida de mãos, corrida, pulo, entre outros. Nesse caso, tratamos que o sprite é o personagem e, para todos estes movimentos, devemos montar as variações de sprite. Em resumo, a ideia é desenhar cada movimento como no exemplo mostrado abaixo. O caso é parecido quando queremos construir uma animação em vídeo utilizando uma sequência de desenhos à mão. \n\n  O nome `sprite` ganhou notoriedade no mundo dos games nas décadas de 1970 e 1980, principalmente nos consoles como Atari VCS (1977), ColecoVision (1982), Nintendo Entertainment System (1983) e Sega Genesis (1988).  \n\n #### Sprites nos dias atuais  \n\n À medida que a performance dos computadores foi melhorando com a evolução de hardware e software,  os videogames evoluíram para o 3D, porém o uso de elementos 2D ainda continua sendo muito utilizado e aclamado no mundo dos games.  \n\n Podemos encontrar excelentes jogos 2D nos consoles atuais, com gráficos lindos que possuem vários elementos de design com grande espectro de cores. \n\n Veja alguns deles: \n\n * **Cuphead** é um jogo eletrônico de tiro 2D que lembra muito os jogos de plataforma dos anos 90 porém com seus gráficos extremamente detalhistas e uma ótima jogabilidade. Outra referência a jogos vintage está no sistema de navegação entre fases através de um mapa ao estilo *Super Mario World*. \n\n * **Ori and the Blind Forest** é outro jogo 2D de plataforma com um visual impressionante, com seu personagem destinado a feitos heróicos. \n\n * **Limbo** é mais um ótimo jogo eletrônico de plataforma, embora não se trate de um colorido, como os exemplos anteriores, é um jogo que possui paisagens deslumbrantes, personagens bizarros e sons perturbadores. O jogo acontece em um cenário totalmente escuro e cinzento, pois se trata de um lugar sombrio e cheio de perigos. \n\n ### Conclusão \n\n Um sprite é um personagem ou um objeto dentro dos jogos 2D. Para criar o efeito de movimento, são necessários vários sprites diferentes com pequenas variações do mesmo personagem. Ele teve maior notoriedade nas décadas de 70 e 80 com a chegada dos videogames 2D. Posteriormente, embora o 3D tenha chegado com a evolução dos hardwares e softwares, o sprite 2D continua sendo muito utilizado nos jogos atuais. \n\n Agora que você já sabe um pouco mais sobre o sprite e como ele funciona, que tal recriar 2 jogos clássicos com Javascript? Temos esses dois cursos de programação que vão lhe mostrar como recriar esses jogos do zero: \n\n - [Jogos clássicos parte 1: iniciando no Javascript com jogo do Pong](https://www.alura.com.br/curso-online-pong-javascript) \n\n - [Jogos clássicos parte 2: Aprenda a criar o clássico jogo Freeway](https://www.alura.com.br/curso-online-javascript-listas-lacos) \n\n E você pode participar também da imersão GAME DEV da Alura através do link: \n\n - [Imersão GAME DEV](https://cursos.alura.com.br/imersoes/aulas/aula-1-animacoes-basicas-e-trilha-sonora-c28) \n\n E deixo aqui o meu agradecimento para você que leu até aqui e pôde aprender um pouco mais desse maravilhoso mundo que é a tecnologia. Valeu!"
    },
    {
        "id": 5,
        "titulo": "Variáveis no CSS",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/construa-css-magico-variaveis-nativas> \n\n  Provavelmente, ao construir um website, você já deve ter reparado que muitos dos valores nos arquivos CSS são dados que se repetem constantemente, não é mesmo? Por exemplo, a paleta de cores que mantém o padrão visual da página é reutilizada em inúmeros pontos do código. Sendo assim, fazer a manutenção do projeto e alterar esses valores manualmente pode se tornar uma tarefa trabalhosa e passiva de erros, ainda mais em aplicações de grande escala.  \n\n Mas então, como podemos melhorar essa situação? \n\n Uma boa alternativa é utilizar as **Variáveis no CSS** como aliadas!  \n\n Se você ficou interessado e deseja descobrir como fazer isso, vem comigo que nesse artigo eu te ensinarei mais sobre esse assunto detalhadamente. \n\n ## Mas primeiro, o que são Variáveis de CSS? \n\n As variáveis de CSS, que também são chamadas de propriedades customizadas, trazem grandes benefícios e vão funcionar de forma bem semelhante às variáveis de linguagens de programação, ou seja, sua maior função é armazenar valores que serão utilizados posteriormente no código.  \n\n Elas permitem criar valores para todas as propriedades de CSS, sendo bastante utilizadas para gerenciar cores, fontes, valores de animações etc. \n\n ## Como utilizar as Variáveis de CSS? \n\n As variáveis de CSS tem acesso ao DOM, o que permite que sejam declaradas globalmente ou localmente. Além disso, possuem uma sintaxe característica que já tivemos um pequeno spoiler na imagem acima. Vamos entender melhor como funciona? \n\n ### Sintaxe \n\n A declaração ou criação de uma variável no arquivo CSS é composta por 4 partes, veja a seguir: \n\n - **1º:** Dois hífens (--) \n\n - **2º:** Nomeação da variável \n\n - **3º:** Dois pontos (:) \n\n - **4º:** Valor da variável \n\n É importante destacar que alguns caracteres não são permitidos na nomeação, como por exemplo: ; # } ] ) etc. \n\n A aplicação das variáveis dentro de um elemento HTML em uma determinada propriedade CSS, é feita por meio da associação entre a função `var()` e o nome da variável, que é passada como parâmetro dentro dos parênteses. Dessa forma: \n\n ``` \n\n body { \n\n background: var(--global-primary-color); \n\n } \n\n ``` \n\n ### Declaração global \n\n Fazemos isso declarando a variável dentro da pseudo classe `:root`. Esse seletor corresponde a raiz, é o mesmo que `<html>` em si, só que possui uma especificidade maior. Por meio do root, estamos disponibilizando elas globalmente, podendo ser utilizadas em qualquer lugar do documento.  \n\n ### Declaração local \n\n Para isso, declaramos a variável dentro do seletor que irá utilizá-la. Assim, ficarão restritas ao escopo da onde elas foram declaradas, sendo herdadas apenas pelos elementos filhos. \n\n ## De onde surgiu? \n\n As variáveis são um recurso que durante muitos anos foi bastante solicitado. Isso porque, anteriormente, essa solução só era possível por meio de pré-processadores, como Sass, Stylus ou através de CSS in JS. Esses artifícios atuam como grandes parceiros, mas ainda sim havia algumas lacunas que faltavam ser preenchidas e que somente foram contempladas com as variáveis no CSS. \n\n O principal ponto a se destacar é que as variáveis de pré processadores são estáticas e necessitam da etapa de compilação, ou seja, todas as funções, mixins e interpolações que ocorrem no Sass retornam CSS puro, para serem interpretadas pelo navegador.  \n\n Já as variáveis de CSS funcionam em tempo de execução, são dinâmicas e funcionam de forma independente das tecnologias usadas, atuando em qualquer contexto, sem precisar de etapas adicionais. \n\n Além disso, ocorrem outras limitações com as variáveis de pré-processamento, como por exemplo a impossibilidade de uso de variáveis por meio do @extend nos medias query, a falta de aplicação da herança e efeito cascata nos elementos e como não há acesso ao DOM, não é possível serem controladas via JavaScript. \n\n ## E quais são as principais vantagens no uso? \n\n ### Código claro  \n\n Afinal, ler `--cor-principal-bordas` é muito mais semântico do que ler #B4E197, onde rapidamente conseguimos entender do que se trata.  \n\n ### Favorece a manutenção  \n\n É possível alterarmos a folha de estilo em muitos lugares, apenas alterando o valor da variável em um único lugar, o que otimiza o tempo de trabalho e evita que possíveis erros de escrita aconteçam. \n\n ### Criação de temas  \n\n Com as variáveis, você pode criar e editar facilmente seus guias de estilos ou construir de maneira mais facilitada temáticas, um exemplo clássico disso é na construção de light/dark mode e como as variáveis de CSS são dinâmicas e tem acesso ao DOM, é possível ter um controle maior por meio da manipulação via Java Script, veja um exemplo prático nesse [Alura+ de Dark Mode](https://cursos.alura.com.br/extra/alura-mais/dark-mode-um-projeto-em-html-css-c1369).  \n\n ## Conteúdo extra \n\n ### Cascata CSS \n\n São beneficiadas pela cascata do CSS, onde podemos atribuir um novo valor a uma variável, de modo que os elementos filhos irão herdar as características do seu elemento pai mais próximo. \n\n ### Relação com o @media query \n\n Atualmente, ainda não podemos utilizar variáveis como medidas de resolução de tela no @media query, dessa forma: \n\n ``` \n\n :root { \n\n --sm: 640px; \n\n } \n\n @media (max-width: var(--sm)) {   \n\n ... \n\n } \n\n ``` \n\n Ainda é necessário utilizar medidas fixas, mas dentro dos media queries é possível aplicar as variáveis, sem que haja problema algum. \n\n ``` \n\n :root { \n\n --color-text-desktop: red; \n\n --color-text-mobile: blue \n\n } \n\n h1 { \n\n color: var(--color-text-desktop) \n\n } \n\n @media (max-width: 640px) { \n\n h1 { \n\n color: var(--color-text-mobile) \n\n } \n\n } \n\n ``` \n\n ### Suporte ao navegador \n\n Segundo o site [Can I use](https://caniuse.com/?search=variables), em relação ao suporte aos navegadores, as variáveis são compatíveis em praticamente todos os navegadores modernos de maneira satisfatória.  \n\n ## Agora é com você!  \n\n Neste artigo, nós aprendemos sobre o poder do uso das variáveis no CSS em um projeto, entendemos melhor sobre os seus conceitos, vantagens e aplicação.  \n\n Para aprofundar o seu mergulho ainda mais no [desenvolvimento front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end), enriquecer seu portfólio e aplicar as variáveis de CSS em diversos projetos incríveis, não deixe de realizar os cursos da [formação front-end](https://www.alura.com.br/formacao-front-end). \n\n Agora me conta, você já utilizava as variáveis em sua rotina de desenvolvimento? Se sim, te convido a contar para nós aqui no fórum ou no discord da Alura as suas impressões da prática com elas. E se você nunca tinha ouvido falar ou se este conteúdo te ajudou de alguma forma, não deixe de dar o seu feedback, sua opinião é muito valiosa para nós e nos ajudar a evoluir e te proporcionar cada vez mais uma melhor experiência de aprendizado.  \n\n Até a próxima e bons estudos!  \n\n "
    },
    {
        "id": 6,
        "titulo": "Principais comunidades de Front-end",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/principais-comunidades-front-end> \n\n  Quando entramos na área da tecnologia é como se estivéssemos descobrindo um mundo completamente novo. E, nessa caminhada, você pode se sentir só e sem rumo. Então, para lhe mostrar que não tem apenas você nessa jornada, vou trazer nesse artigo algumas comunidades de [front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end) para que possa conhecer e fazer parte. \n\n ## O que é uma comunidade?\n\n Comunidade é um grupo de pessoas que se reúnem para trocar ideias, dividir experiências e criar eventos (como palestras e workshops, que podem ser presenciais ou on-line). Nesses grupos, diversos temas são debatidos, principalmente sobre as principais demandas do mercado e as tendências da atualidade. \n\n Esses espaços são conhecidos por oferecerem bastante suporte, o que é incrível para quem está começando agora na carreira de dev. Neles, você encontrará desde as pessoas iniciantes até as mais experientes e todas estão dispostas a ajudar com qualquer dúvida. O fato é que uma pessoa antes de você já pode ter tido perguntas semelhantes às suas e, nesses grupos, você pode encontrar a solução rapidamente.\n\n Além disso, você pode se manter informado sobre as boas práticas, novidades, receber feedbacks, conhecer pessoas novas e se conectar com elas. Aliás, fazer networking é importante em qualquer área, pois, ao se conectar com diferentes tipos de pessoas, você não cresce apenas profissionalmente, mas como indivíduo também. \n\n Há muitas comunidades para pessoas desenvolvedoras por aí. Por isso,nesse artigo, irei trazer as principais comunidades voltadas para o Front-end.  \n\n Vamos lá?\n\n ## Comunidades do Front-end para fazer parte   \n\n### Stack Overflow\n\n O [Stack Overflow](https://pt.stackoverflow.com/) é um site de perguntas e respostas dedicado a pessoas que já programam ou que querem aprender a programar. A comunidade responde e faz perguntas constantemente, e as pessoas usuárias votam nas melhores para que elas subam no feed e sejam encontradas com mais facilidade. Existem muitas perguntas em inglês, mas, se você quiser, pode ir até a parte que está tudo em português. Legal, né? \n\n Você também ganha reputação quando vota nas suas perguntas e respostas. Em níveis mais altos, você ganha privilégios como a permissão de moderação e passa a ajudar a manter a qualidade do site e da comunidade. \n\n ### GitHub\n\n  O GitHub é uma plataforma onde você compartilha seu código e arquivos com controle de versão usando o Git. Ele é como uma rede social para pessoas que programam. Assim, você pode seguir pessoas, trocar mensagens e contribuir em projetos privados ou [Open Source](https://www.alura.com.br/artigos/open-source-uma-breve-introducao).\n\n  Apesar do GitHub ter muitas trocas em inglês, vou trazer aqui uma opção maravilhosa em português.  \n\n Na plataforma existe um fórum incrível chamado [Front-end Brasil](https://github.com/frontendbr). Ele foi criado com o objetivo de reunir dúvidas vindas de outras redes sociais, como Facebook, mas que acabavam perdidas depois de um tempo. Ou seja, as pessoas criadoras deste espaço queriam unificar todas as discussões em um só local e escolheram, justamente, o GitHub por ser mais fácil de encontrar dúvidas antigas. \n\n Na página principal tem o link que te leva para o fórum, outro para divulgação de vagas na área de Front-end e o terceiro link vai para a parte de eventos. O mais legal é que qualquer pessoa pode adicionar uma vaga, criar um evento ou dar sugestões, desde que esteja dentro das diretrizes do site, claro.  \n\n ### MDN Web Docs \n\n O [MDN Web Docs](https://developer.mozilla.org/pt-BR/) é um projeto colaborativo open source que documenta tecnologias de plataforma da Web, como HTML, CSS, JavaScript e APIs da Web. Eles também fornecem uma grande coleção de recursos aprendizagem para devs e estudantes iniciantes, como uma [trilha de estudos](https://developer.mozilla.org/pt-BR/docs/Learn/Front-end_web_developer) para desenvolvimento front-end, que você pode acessar em inglês ou português. Top, né? \n\n Nessa área, o MDN se propõe a levar você de iniciante a confortável, para que, a partir desse conhecimento básico, você trilhe seu caminho no mundo da programação. E caso você tenha dúvidas ou fique preso em um problema, eles também disponibilizam um fórum para que você poste sua pergunta e outras pessoas possam te ajudar.  \n\n ### Coderwall \n\n O [Coderwall](https://coderwall.com/t/web/popular)  é uma comunidade de devs  para aprender e compartilhar dicas de programação. Há uma seção de dicas específicas para ajudar a resolver problemas ou aprender coisas novas, separadas por tags. Você pode pesquisar “front-end”, por exemplo, e irá encontrar tudo relacionado ao assunto. \n\n Além de existir muitos recursos para iniciantes e devs mais experientes, também há áreas exclusivas para dicas de JavaScript, CSS, HTML, Python, Ruby, iOS e vários outros assuntos, em que você tem total liberdade para perguntar ou postar dicas.  \n\n Um ponto importante é que a maior parte do conteúdo é em inglês, mas isso não precisa ser um empecilho, pois você pode usar o recurso de tradução caso queira, como o [Google Tradutor](https://translate.google.com.br/?hl=pt-BR) ou o [DeepL](https://www.deepl.com/translator). \n\n  ### WoMakersCode \n\n A [WoMakersCode](https://www.linkedin.com/company/womakerscode/) tem a missão de inspirar e impulsionar meninas e mulheres que desejam ingressar ou se especializar em carreiras ligadas à tecnologia e inovação. Dessa forma, é uma organização que cria várias iniciativas de capacitação, mentoria, empregabilidade e conteúdos digitais. Ou seja, você mulher que se sente sozinha nessa área, onde os homens ainda são maioria, tem a possibilidade de se conectar com outras mulheres e aprender muito com elas. \n\n A organização também disponibiliza várias palestras, workshops e feira de vagas que você pode se inscrever através [desse link](https://linktr.ee/womakerscode) de forma online e gratuita. E olha só que demais: se quiser, você pode se inscrever para ser palestrante voluntária. \n\n ### She's Tech \n\n A She’s Tech tem três pilares: inspirar, engajar e capacitar. Ela atua pela conscientização do mercado sobre a diversidade, inclusão e estimula a auto-aceleração através da liderança e protagonismo. \n\n Além disso, por meio dela, diversos eventos online e gratuitos são promovidos, onde outras mulheres que já estão atuando na área da tecnologia repassam o que aprenderam durante a vida. Essa comunidade também possui um [grupo no telegram](https://t.me/shestech) para postar e compartilhar oportunidades de trabalho, eventos e cursos para mulheres. \n\n ### Minas Programam \n\n O [Minas Programam](http://minasprogramam.com/) foi criado para desafiar  a influência dos estereótipos de gênero e de raça na relação de mulheres com as áreas de ciências, tecnologia e computação, de acordo com as criadoras. \n\n É um projeto que dá oportunidades de aprendizado sobre programação para meninas e mulheres (cis ou trans) e pessoas não-binárias, especialmente aquelas que são negras ou indígenas, por meio de cursos gratuitos, dicas de livros, oficinas e apoio para as futuras devs que não têm um computador para começar a programar. \n\n ### Comunidades Tech \n\n O [Comunidades Tech](https://comunidades.tech/) é um projeto open source, onde você pode pesquisar por vários grupos de tecnologia e filtrar por: categoria, tipo, cidade, país, nome da comunidade, entre outros. Após escolher qual você quer participar, é só clicar para encontrar os links de entrada do grupo, que podem ser no discord, facebook, slack, meetup, telegram, whatsapp e até em podcast. \n\n Você também pode criar seu próprio grupo e cadastrar lá para que outras pessoas encontrem e sua comunidade cresça. \n\n ## Conclusão \n\n Muito legal né? E você, já participa de comunidades?  \n\n Sempre há novidades no mundo da programação e mergulhar em comunidades é muito importante para o seu desenvolvimento como dev. Se você já participa, usufrua de tudo o que ela tem para oferecer, ajude as pessoas, participe de conversas, vá aos encontros e palestras. \n\n Lembrando que se você é estudante da Alura temos a nossa própria comunidade no discord, onde você pode pedir ajuda e ajudar várias pessoas. Todas as pessoas estão sempre dispostas a dar aquela dica incrível ou achar o motivo daquele erro que você não consegue encontrar por nada.  \n\n Afinal, ninguém consegue fazer tudo só! Se você ainda não faz parte, venha e se encante.  \n\n Vou deixar [aqui o link](https://cursos.alura.com.br/extra/alura-mais/comunidade-no-discord-c1400)  para o Alura+ do João Manoel sobre a comunidade da Alura no discord, onde ele mostra como você faz para entrar e explica tudo sobre como utilizar esse aplicativo. Caso você não tenha muita familiaridade, indico muito que assista.  \n\n Ah! E se tiver mais dicas de comunidade indique pra gente lá no nosso canal do discord, tenho certeza que todo mundo vai gostar.  \n\n Agora é com você! Pesquise sobre as comunidades e participe das que gostar mais.  \n\n "
    },
    {
        "id": 7,
        "titulo": "Formulários reativos com Angular",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/como-aplicar-validacao-formularios-reativos-angular> \n\n  Você já deve ter preenchido um formulário que não indicava claramente o porquê de algum campo não estar válido e teve que ficar adivinhando quantos caracteres sua senha precisava ter ou que tipo de caracteres deveria receber. Ou, em um formulário longo, já ocorreu de preencher apenas os campos que achava serem requeridos e só no final, ao tentar submeter os dados, se deparou com inúmeras mensagens de erro mostrando que diversos outros campos eram obrigatórios? Chato, né? Vem aprender como melhorar essa experiência com o uso das validações customizadas do Angular!\n\nNeste artigo, você vai aprender como:\n\n\n\n- Criar um formulário reativo;\n\n- Aplicar validações padrão e criar validações customizadas;\n\n- Mostrar os erros de validação apenas quando o campo for acessado;\n\n- Habilitar o botão de submeter os dados apenas quando o formulário estiver válido.\n\n\n\nVamos lá?\n\n\n\nCriar formulários é algo muito comum na rotina de devs front-end. Tanto em formulários mais simples e, principalmente à medida que a quantidade de campos do formulário cresce, é necessário implementar validações. \n\n\n\nAs validações são importantes para prevenir erros de cadastro e garantir que as informações preenchidas estejam no formato esperado, mas é preciso deixar claro todas as particularidades dos campos a serem preenchidos, a fim de promover uma interação mais dinâmica e amigável das pessoas com nossa aplicação. \n\n\n\n## O que são formulários reativos?\n\n\n\nNo Angular, existem dois tipos diferentes de formulários: *template drive* e *data driven*. Os do tipo *template driven* são criados e configurados no `component.html`; as validações também são incluídas no template e os valores do formulário são submetidos através da diretiva *ngSubmit*.\n\n\n\nJá os formulários *data driven* (orientados a dados) são criados e configurados no `component.ts` e a maior parte do código fica nesse arquivo e não no html. Dessa forma, temos um template mais limpo, apenas com a estrutura básica do formulário, já que todas as validações são feitas no componente. No html é feita a associação do template ao componente e não precisamos obrigatoriamente do *ngSubmit*.\n\n\n\nFáceis de criar e de dar manutenção, os formulários reativos, como também são conhecidos, são bastante utilizados devido ao seu poder e capacidade de conseguir reagir a mudanças que acontecem no formulário, utilizando [observables](https://www.alura.com.br/curso-online-angular-rxjs-introducao-programacao-reativa). \n\n\n\nAgora nós vamos entender como podemos criar um formulário reativo e aplicar validações nele. \n\n\n\n## O que precisamos configurar?\n\n\n\nCom a aplicação criada, precisamos importar o `reactiveformsModule` no arquivo `app.module.ts` e colocar no array de *imports* do `ngModule`, assim:\n\n\n\n```\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n\n  declarations: [\n\nAppComponent\n\n  ],\n\n  imports: [\n\nBrowserModule,\n\nAppRoutingModule,\n\nReactiveFormsModule\n\n  ],\n\n  providers: [],\n\n  bootstrap: [AppComponent]\n\n})\n\n\n\nexport class AppModule { }\n\n```\n\n\n\nSe você tem dúvidas nesse passo, [veja aqui como começar com o Angular](https://www.alura.com.br/artigos/como-comecar-com-angular) e [como criar sua primeira aplicação](https://www.alura.com.br/artigos/criando-aplicacoes-angular-com-angular-cli).\n\n\n\nAgora, vamos criar no “app.component.ts” uma variável chamada formulario do tipo **FormGroup** (deve ser importado também), que é uma classe do Angular que vai nos ajudar na implementação e validação dos forms. Outra classe importante que veremos mais à frente é o **FormControl**.\n\n\n\n```\n\nimport { FormGroup } from '@angular/forms';\n\n\n\nformulario: FormGroup;\n\n```\n\n\n\nA abordagem que vamos utilizar para criar nosso formulário é através da injeção de dependência do *service* **FormBuilder**. Esse serviço fornece métodos para gerar controles de formulários e evita a criação manual de instâncias de controle. Para isso vamos ter que:  \n\n\n\n- Importar a classe FormBuilder;\n\n- Injetar o service FormBuilder;\n\n- Gerar o conteúdo do formulário.\n\n\n\nVamos criar um formulário com 4 campos:\n\n\n\n- nome\n\n- username\n\n- email\n\n- senha\n\n\n\nNosso `app.component.ts` ficará assim:\n\n\n\n```\n\nimport { Component } from '@angular/core';\n\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n\n\n@Component({\n\n  selector: 'app-root',\n\n  templateUrl: './app.component.html',\n\n  styleUrls: ['./app.component.css']\n\n})\n\nexport class AppComponent {\n\n\n\n  formulario: FormGroup;\n\n\n\n  constructor(private formBuilder: FormBuilder) { }\n\n\n\n  ngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: [''],\n\nusername: [''],\n\nemail: [''],\n\nsenha: ['']\n\n});\n\n  }\n\n}\n\n```\n\n\n\nTambém precisamos criar a estrutura do formulário no template com os quatro campos. Agora, antes de implementar as validações, vamos fazer a sincronização do formulário criado no componente com o template para vermos se está tudo certo.\n\n\n\nPara isso podemos usar uma diretiva do `ReactiveFormsModule` chamada **formGroup**. E na tag *form* do html vamos atribuir a diretiva à nossa variável *formulario* e fazer um *property binding*, porque sempre que o campo for modificado, queremos atualizar e atribuir o valor ao formulário.\n\n\n\n```\n\n<form [formGroup]=\"formulario\"></form>\n\n```\n\n\n\nPara associar cada input utilizamos outra diretiva chamada **formControlName**, fazendo um link entre o campo no html e o componente e passando exatamente o nome das variáveis que criamos através do FormBuilder.\n\n\n\n```\n\n<input id=\"nome\" type=\"text\" formControlName=\"nome\" >\n\n<input id=\"username\" type=\"text\" formControlName=\"username\" >\n\n<input id=\"email\" type=\"email\" formControlName=\"email\" >\n\n<input id=\"senha\" type=\"password\" formControlName=\"senha\" >\n\n```\n\n\n\nNosso formulário está assim (estilizado com o [Angular Material](https://material.angular.io/)). \n\n\n\n ## Aplicando as validações\n\n\n\nAgora, vamos incluir as seguintes validações na aplicação:\n\n\n\n- Todos os campos serão de preenchimento obrigatório;\n\n- O campo username aceitará apenas letras minúsculas;\n\n- Verificação do preenchimento correto do formato de e-mail;\n\n- Quantidade mínima de caracteres para a senha será 6.\n\n\n\nPara começar, vamos importar a classe **Validators**:\n\n\n\n```\n\nimport { Validators } from '@angular/forms';\n\n```\n\n\n\nEssa classe já traz vários métodos de validação prontos e fáceis de usar como por exemplo:\n\n\n\n- required() - campo de preenchimento obrigatório;\n\n- maxLength() - quantidade máxima de caracteres permitido;\n\n- minLength() - quantidade mínima de caracteres permitido;\n\n- email() - valida o formato de e-mail;\n\n\n\n[Veja aqui a lista completa de métodos da classe Validators](https://angular.io/api/forms/Validators).\n\n\n\nAgora vamos implementar as validações no formulário, passando os métodos de validação como segundo parâmetro do array criado no `component.ts`. \n\n\n\n```\n\nngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: ['', [Validators.required]],\n\nusername: ['',  [Validators.required]],\n\nemail: ['', [Validators.required, Validators.email]],\n\nsenha: ['', [Validators.required, Validators.minLength(6)]]\n\n});\n\n  }\n\n```\n\n\n\n## Exibindo mensagens de erro\n\n\n\nPara exibir mensagens referentes às validações, vamos incluir no html, abaixo do input, uma div com a diretiva *ngIf, passando o formulário e pegando os erros do campo passado como parâmetro, e incluindo a mensagem que queremos apresentar:\n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nVamos replicar isso em cada campo e ver o resultado:\n\n\n\nOk, agora as mensagens estão aparecendo, mas já no carregamento inicial da aplicação. Será que existe uma forma mais amigável de apresentá-las? Apenas quando o campo for acessado? Sim!! Podemos fazer isso através de uma propriedade do FormControl chamada **touched**. Seu valor inicial é *false* e sempre que o input dispara o evento *onBlur*, ou seja, quando o campo é acessado e perde o foco, a propriedade recebe o valor *true*.\n\n\n\nNo exemplo do campo *nome* ficará assim: \n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors?.['required'] && formulario.get('nome')?.touched>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nReplicando para os outros campos, agora as mensagens de erro aparecem apenas quando necessário.\n\n\n\n ## Criando validações customizadas\n\n\n\nA validação que queremos incluir para que o campo username receba apenas letras minúsculas não está presente na classe ``Validators``. Mas não tem problema, pois é possível criar inúmeras validações customizadas que atendam às suas necessidades.\n\nNo nosso exemplo, criamos um arquivo chamado `minusculoValidator.ts`, importamos a classe **Abstract Control** e criamos a lógica da validação. \n\n\n\n`minusculoValidator.ts`:\n\n```\n\nimport { AbstractControl } from \"@angular/forms\";\n\n\n\nexport function minusculoValidator(control: AbstractControl) {\n\nconst username = control.value as string;\n\nif(username !== username?.toLowerCase()) {\n\nreturn { minusculo: true };\n\n} else\n\nreturn null;\n\n}\n\n```\n\n\n\nDepois disso, importamos a validação no componente e incluímos no array junto com as outras validações.\n\n\n\n`app.component.ts`:\n\n```\n\nusername: ['',  [Validators.required, minusculoValidator]],\n\n```\n\n\n\n`app.component.html`:\n\n```\n\n<div *ngIf=\"formulario.get('username')?.errors?.['minusculo’] && formulario.get('username')?.touched\">\n\nEsse campo aceita apenas letras minúsculas\"\n\n</div>\n\n```\n\n\n\nAssim, através da propriedade *errors*, podemos criar mensagens customizadas dependendo do erro que seja disparado.\n\n\n\n## Desabilitar/Habilitar o botão\n\n\n\nOutro ponto importante é que o botão para envio dos dados está habilitado desde o início, mesmo que os campos não tenham sido preenchidos. Vamos resolver isso?\n\n\n\nO formulário possui a propriedade *valid* e podemos fazer um property binding atribuindo-a à propriedade disabled do botão e assim criar uma lógica para que o botão fique habilitado apenas quando o formulário estiver válido, ou seja, quando todos os campos forem preenchidos corretamente.\n\n\n\n`app.component.html`:\n\n```\n\n<button [disabled]=\"!formulario.valid\">\n\nCadastre-se\n\n</button>\n\n```\n\n\n\n"
    },
    {
        "id": 8,
        "titulo": "Svelte ou React?",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/svelte-versus-react-quais-diferencas> \n\n  Inegavelmente, o [React é a ferramenta que **atualmente domina o mercado front-end**](https://www.alura.com.br/formacao-react-ts), sendo a mais utilizada de acordo com a [pesquisa de 2020 do State of JS](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/), seguida de seus concorrentes Angular e Vue.js. Essa demanda também é notável quando pesquisamos por vagas em plataformas de empregos. \n\nPorém, uma nova ferramenta vem ganhando força nos últimos anos e superou todas as outras nessa mesma pesquisa no quesito **satisfação**: o Svelte. \n\n \n\n## Mas o que é o Svelte? \n\n \n\nO [Svelte](https://svelte.dev/) é um **compilador** utilizado para construir interfaces web, assim como React, Angular e Vue.js. Ele foi criado em 2016 por Rich Harris, e vem com a proposta de ser mais performático, fácil de aprender e utilizar, possuindo uma alta curva de aprendizagem, além da sintaxe simples e intuitiva. \n\n \n\nO Svelte em si é muito leve: [4.4kB, ou 1.6 kB comprimido](https://bundlephobia.com/package/svelte@3.43.2), custando muito menos para os navegadores baixarem os arquivos. Para comparação, os pacotes [react](https://bundlephobia.com/package/react@17.0.2) e [react-dom](https://bundlephobia.com/package/react@17.0.2), juntos, somam 126kB, ou 42.2kB comprimidos. \n\n \n\n## Como funciona um compilador no front-end? \n\n \n\nO compilador do Svelte lê o código que escrevemos e o **compila** para JavaScript puro, [sem utilizar Virtual DOM](https://svelte.dev/blog/virtual-dom-is-pure-overhead). O código gerado é [extremamente performático](https://krausest.github.io/js-framework-benchmark/2022/table_chrome_99.0.4844.51.html) em relação aos seus concorrentes. \n\n \n\nVocê também pode ver o processo de compilação na prática, utilizando o [REPL](https://svelte.dev/repl/hello-world), uma ferramenta criada pelo Svelte, onde podemos testar nossos códigos online e ver os arquivos JS gerados. \n\n \n\n> Dica: utilize o REPL para testar os exemplos deste artigo! \n\n \n\nAgora que você entende como funciona o Svelte e o quão performático ele é, vamos compará-lo com o React, com alguns exemplos de código! \n\n \n\n## Comparação de código Svelte vs React \n\n \n\n### Estrutura de um componente \n\n \n\nVamos considerar o seguinte código React: \n\n \n\n``` \n\nimport './App.css'; \n\nimport { useState } from 'react'; \n\n \n\nfunction App() { \n\n  const [nome, setNome] = useState('World'); \n\n \n\n  return ( \n\n<div className=\"App\"> \n\n<h1>Hello {nome}!</h1> \n\n</div> \n\n  ); \n\n} \n\n \n\nexport default App; \n\n``` \n\n \n\nCom o Svelte, o mesmo código acima ficaria assim: \n\n \n\n``` \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n \n\n<main> \n\n<h1>Hello {nome}!</h1> \n\n</main> \n\n \n\n<style> \n\nmain { \n\n/* estilos de main */ \n\n} \n\n \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n``` \n\n \n\nO Svelte utiliza a estrutura **Single File Component** (Componente de Arquivo Único), onde deixamos HTML, CSS e JS em um mesmo arquivo com extensão `.svelte`. Vemos no exemplo acima que o JS fica dentro da tag `<script>`, o CSS dentro da `<style>` e o HTML não precisa ser delimitado por alguma tag. Além disso, essas partes podem vir em qualquer ordem, então o código abaixo também é válido: \n\n \n\n``` \n\n<style> \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n \n\n<h1>Hello {nome}!</h1> \n\n<p> \n\nMinha primeira aplicação Svelte! \n\n</p> \n\n \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n``` \n\n \n\nNote também que o HTML do componente não precisa ser envolto por uma tag, como no exemplo acima, que utilizamos as tags `<h1>` e `<p>`. \n\n \n\n### Estado \n\n \n\nEm React, para criarmos um estado, precisamos explicitá-lo no código utilizando `useState`. Já no Svelte, qualquer variável que criamos com a palavra-chave `let` se torna um estado por padrão. \n\n \n\nAinda, em React, se quisermos alterar o estado `nome` para um novo valor no clique de um botão, podemos escrever o seguinte: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nO código acima ficaria assim em Svelte: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nRepare que utilizamos a diretiva [on:](https://svelte.dev/tutorial/dom-events) para escutar o evento de `click` do botão. Note também que precisamos apenas fazer uma atribuição direta ao estado `nome`, e a interface do componente será re-renderizada de acordo com a mudança. Trata-se de uma sintaxe intuitiva e prática, especialmente, quando trabalhamos com objetos e arrays. \n\n \n\n> Diretivas são como “atributos especiais” que colocamos em tags do HTML. Elas já são conhecidas em Angular e Vue.js, e são um recurso poderoso, que podem nos ajudar de diversas formas no nosso desenvolvimento. \n\n \n\n### Two-way data binding \n\n \n\nVamos criar um input que altera o estado `nome` que criamos no código React, utilizando a função `setNome`: \n\n \n\n``` \n\n<input \n\ntype=\"text\" \n\nvalue={nome} \n\nonChange={(e) => setNome(e.target.value)}   \n\n/> \n\n``` \n\n \n\nNote que precisamos declarar o atributo `value={nome}` para que o estado defina o valor inicial do campo, e também declarar o atributo `onChange={(e) => setNome(e.target.value)}` para que as alterações no campo alterem o estado também. \n\n \n\nNo Svelte, podemos simplificar essas operações utilizando a seguinte sintaxe: \n\n \n\n``` \n\n<input type=\"text\" bind:value={nome} /> \n\n``` \n\n \n\nUsamos a diretiva [bind:](https://svelte.dev/tutorial/text-inputs) para fazer um **Two-way data binding** (Ligação de dados bidirecional) que, nesse caso, serve para **ligar** (ou **vincular**) um atributo do HTML a um estado. Dessa forma, o atributo `value` e o estado `nome` sempre possuirão o mesmo valor. \n\n \n\n### Estilos escopados \n\n \n\nNo React, por padrão, os estilos não são escopados, ou seja, se arquivos CSS declararem estilos para um mesmo seletor, esses estilos irão interferir entre si. Soluções possíveis são utilizar módulos CSS ou Styled Components. \n\n \n\nJá no Svelte, os estilos são [**escopados por padrão**](https://svelte.dev/docs#component-format-style), pois esse é o comportamento que geralmente queremos. Se, por acaso, precisarmos que algum estilo seja global para todos os componentes, podemos escrever a seguinte sintaxe: \n\n \n\n``` \n\n:global(h1) { \n\n/* estilos de h1 */ \n\n} \n\n``` \n\n \n\nUtilizamos o modificador `:global()` e, dentro dos parênteses, colocamos o seletor CSS que queremos globalizar. \n\n \n\n### Estrutura de condição \n\n \n\nNo React, combinamos o JS com JSX para renderizar HTML de forma condicional, como nesse código: \n\n \n\n``` \n\n{ \n\nnome === 'Antônio' \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDiferentemente, no Svelte, temos uma estrutura dedicada para essas situações, e o código ficaria assim: \n\n \n\n``` \n\n{#if nome === 'Antônio'} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nEsse é o bloco [#if](https://svelte.dev/tutorial/if-blocks) do Svelte, e pode ser utilizado, opcionalmente, com cláusulas `:else if` e `:else`. \n\n \n\n### Estrutura de repetição \n\n \n\nEm React, podemos combinar o JS com JSX para iterar sobre alguma lista e renderizar HTML de acordo com ela. Considere que temos um estado chamado `numeros`, que é um array do JavaScript. Para imprimir um parágrafo para cada item do array, faríamos algo assim: \n\n \n\n``` \n\n{numeros.map((numero) => ( \n\n<p>Número: {numero}</p> \n\n))} \n\n``` \n\n \n\nJá no Svelte, temos um estrutura dedicada para esses casos, e nosso código ficaria assim:  \n\n \n\n``` \n\n{#each numeros as numero} \n\n<p>Número: {numero}</p> \n\n{/each} \n\n``` \n\n \n\nEsse é o bloco [#each](https://svelte.dev/tutorial/else-blocks) do Svelte e ele pode até ser utilizado junto com uma cláusula `:else`, que mostra um HTML caso a lista esteja vazia. \n\n \n\n> Note que esses blocos especiais sempre começam com `#`, “continuam” com `:` (quando há cláusulas) e terminam em `/`. \n\n \n\n### Código reativo \n\n \n\nÀs vezes, no nosso código, é útil guardar valores que dependem de algum estado do componente. Em React, logo após a declaração do estado `nome`, poderíamos adicionar o seguinte código: \n\n \n\n``` \n\nconst meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, podemos utilizar `meuNome` no botão e no condicional: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{ \n\nmeuNome \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDessa forma, evitamos repetição de código, além de aumentarmos a legibilidade e a facilidade de manutenção. Entretanto, o código `const meuNome = nome === 'Antônio';` é executado sempre que o componente é re-renderizado, mesmo que essa renderização tenha sido causada por um estado que não fosse `nome`. \n\n \n\nPor outro lado, no Svelte, todo o código dentro da tag `<script>` é executado uma única vez, quando o componente é renderizado pela primeira vez na tela. Então, como faríamos para replicar a situação acima? \n\n \n\nNa tag `<script>`, podemos adicionar o seguinte código: \n\n \n\n``` \n\n$: meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, no HTML, podemos utilizar `meuNome`: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{#if meuNome} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nA sintaxe [$:](https://svelte.dev/tutorial/reactive-statements) indica que um código deve ser reativo! O Svelte identifica quais estados estão sendo utilizados nessa sintaxe e executa o código quando algum desses estados é alterado. Assim, `meuNome = nome === 'Antônio'` é executado somente quando o estado `nome` for alterado. \n\n \n\n> Se você já trabalhou com Vue.js, talvez tenha lembrado das *computed properties* (propriedades computadas). De fato, a “sintaxe de dólar” funciona praticamente da mesma forma. \n\n \n\n### E não para por aí… \n\n \n\nFizemos a comparação entre conceitos fundamentais do Svelte e do React, mas ainda levaríamos vários artigos para cobrirmos mais diferenças importantes! Algumas delas: \n\n \n\n- **Comunicação entre componentes**: no React, a comunicação básica entre componentes se dá de forma unidirecional e sempre do pai para o filho, através de props. Já o Svelte fornece várias opções pra gente, como props, [dispatch](https://svelte.dev/tutorial/component-events) (filho para o pai) e [bind](https://svelte.dev/tutorial/component-bindings) (comunicação bidirecional). \n\n \n\n- **Composição de componentes**: no React, para passarmos conteúdos mais complexos para um componente filho, podemos utilizar `children`. No Svelte, utilizamos o [`slot`](https://svelte.dev/tutorial/slots), que nos dá uma grande variedade de recursos, como definir um conteúdo padrão (*fallback*), configurar o recebimento de mais de um conteúdo (*named slots*), entre outros. \n\n \n\n- **Métodos de ciclo de vida**: na abordagem funcional do React, o controle dos ciclos de vida de um componente é unificado no hook `useEffect()`. O Svelte prefere separar essas responsabilidades em [diferentes métodos](https://svelte.dev/tutorial/onmount): `onMount()`, `beforeUpdate()`, `afterUpdate()` e `onDestroy()`. Mas também temos a opção de retornar uma função para o método `onMount()`, e ela será executada quando o componente for destruído, ou seja, como se ela estivesse no método `onDestroy()`. \n\n \n\n- **Gerenciamento de estado**: no React, podemos optar pela solução nativa, a Context API, ou alguma biblioteca externa, como Redux. No Svelte, temos duas soluções nativas: as [Stores](https://svelte.dev/tutorial/writable-stores), para gerenciamento de estado global, e uma [Context API](https://svelte.dev/tutorial/context-api) também, para casos mais específicos. \n\n \n\n## Resumindo, Svelte é melhor que React? \n\n \n\nApesar de todos os benefícios citados, o Svelte ainda é uma **tecnologia em ascensão**, e não possui tantas oportunidades de emprego quanto seus concorrentes. \n\n \n\nPor outro lado, ele já é utilizado por empresas como Spotify, The New York Times, Avast, Philips, e outras, como podemos ver na [página principal do Svelte](https://svelte.dev/) e [nessa página da extensão Wappalyzer](https://www.wappalyzer.com/technologies/javascript-frameworks/svelte), que analisa quais sites utilizam determinada tecnologia. \n\n O React ainda lidera o mercado e as vagas de emprego. Mas nós, pessoas desenvolvedoras front-end, devemos sempre nos manter atualizadas de novas tecnologias, principalmente, quando possuem um grande potencial de crescimento, como o Svelte. Além disso, estudar diferentes ferramentas front-end é uma excelente forma de reforçar conceitos e de apurar nosso senso crítico, fazendo-nos questionar as decisões que foram tomadas na construção de uma determinada tecnologia. \n\n \n\nPara conferir todos os recursos do Svelte citados neste artigo, você pode visitar o [tutorial](https://svelte.dev/tutorial/basics) ou a [documentação](https://svelte.dev/docs).  \n\n \n\nConfira também esse Hipster Ponto Tube: [Como trabalhar com Framework SVELTE? Com Mario Souto](https://www.youtube.com/watch?v=1F7r0G0hFcE). \n\n"
    }
]